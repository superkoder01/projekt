// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// InvoiceCountRepo is an autogenerated mock type for the InvoiceCountRepo type
type InvoiceCountRepo struct {
	mock.Mock
}

// CountInvoices provides a mock function with given fields: ctx, customerId, from, to
func (_m *InvoiceCountRepo) CountInvoices(ctx context.Context, customerId string, from string, to string) (int64, error) {
	ret := _m.Called(ctx, customerId, from, to)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) int64); ok {
		r0 = rf(ctx, customerId, from, to)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, customerId, from, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CountRepurchaseInvoices provides a mock function with given fields: ctx, customerId, from, to
func (_m *InvoiceCountRepo) CountRepurchaseInvoices(ctx context.Context, customerId string, from string, to string) (int64, error) {
	ret := _m.Called(ctx, customerId, from, to)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) int64); ok {
		r0 = rf(ctx, customerId, from, to)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, customerId, from, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type NewInvoiceCountRepoT interface {
	mock.TestingT
	Cleanup(func())
}

// NewInvoiceCountRepo creates a new instance of InvoiceCountRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewInvoiceCountRepo(t NewInvoiceCountRepoT) *InvoiceCountRepo {
	mock := &InvoiceCountRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
