// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	context "context"

	billing "gitlab.sce-ovoo.pl/ovoo/products/chain4energy/billing/commons.git/billing"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// InvoiceRepo is an autogenerated mock type for the InvoiceRepo type
type InvoiceRepo struct {
	mock.Mock
}

// CountInvoices provides a mock function with given fields: ctx, customerId, from, to
func (_m *InvoiceRepo) CountInvoices(ctx context.Context, customerId string, from string, to string) (int64, error) {
	ret := _m.Called(ctx, customerId, from, to)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) int64); ok {
		r0 = rf(ctx, customerId, from, to)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, customerId, from, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CountRepurchaseInvoices provides a mock function with given fields: ctx, customerId, from, to
func (_m *InvoiceRepo) CountRepurchaseInvoices(ctx context.Context, customerId string, from string, to string) (int64, error) {
	ret := _m.Called(ctx, customerId, from, to)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) int64); ok {
		r0 = rf(ctx, customerId, from, to)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, customerId, from, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInvoiceSummaryByIssueDate provides a mock function with given fields: ctx, issueStartDate, issueEndDate
func (_m *InvoiceRepo) GetInvoiceSummaryByIssueDate(ctx context.Context, issueStartDate time.Time, issueEndDate time.Time) (*billing.InvoiceSummary, error) {
	ret := _m.Called(ctx, issueStartDate, issueEndDate)

	var r0 *billing.InvoiceSummary
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, time.Time) *billing.InvoiceSummary); ok {
		r0 = rf(ctx, issueStartDate, issueEndDate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing.InvoiceSummary)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, time.Time, time.Time) error); ok {
		r1 = rf(ctx, issueStartDate, issueEndDate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreMany provides a mock function with given fields: ctx, documents
func (_m *InvoiceRepo) StoreMany(ctx context.Context, documents ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, documents...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ...interface{}) error); ok {
		r0 = rf(ctx, documents...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StoreManyWithinTransaction provides a mock function with given fields: ctx, documents
func (_m *InvoiceRepo) StoreManyWithinTransaction(ctx context.Context, documents ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, documents...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ...interface{}) error); ok {
		r0 = rf(ctx, documents...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StoreOne provides a mock function with given fields: ctx, document
func (_m *InvoiceRepo) StoreOne(ctx context.Context, document interface{}) error {
	ret := _m.Called(ctx, document)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) error); ok {
		r0 = rf(ctx, document)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type NewInvoiceRepoT interface {
	mock.TestingT
	Cleanup(func())
}

// NewInvoiceRepo creates a new instance of InvoiceRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewInvoiceRepo(t NewInvoiceRepoT) *InvoiceRepo {
	mock := &InvoiceRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
