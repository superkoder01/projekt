// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	context "context"

	billing "gitlab.sce-ovoo.pl/ovoo/products/chain4energy/billing/commons.git/billing"

	mock "github.com/stretchr/testify/mock"
)

// ContractRepo is an autogenerated mock type for the ContractRepo type
type ContractRepo struct {
	mock.Mock
}

// GetContractByContractNumber provides a mock function with given fields: ctx, contractNumber
func (_m *ContractRepo) GetContractByContractNumber(ctx context.Context, contractNumber string) (*billing.Contract, error) {
	ret := _m.Called(ctx, contractNumber)

	var r0 *billing.Contract
	if rf, ok := ret.Get(0).(func(context.Context, string) *billing.Contract); ok {
		r0 = rf(ctx, contractNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing.Contract)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, contractNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type NewContractRepoT interface {
	mock.TestingT
	Cleanup(func())
}

// NewContractRepo creates a new instance of ContractRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewContractRepo(t NewContractRepoT) *ContractRepo {
	mock := &ContractRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
