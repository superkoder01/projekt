/*
BMSFES. 
Copyright (C) 2022-2035 

This file is part of the BMSFES solution. 
BMSFES is free software: you can redistribute it and/or modify 
it under the terms of the GNU Affero General Public License as 
published by the Free Software Foundation, either version 3 of the 
License, or (at your option) any later version.
 
BMSFES solution is distributed in the hope that it will be useful, 
but WITHOUT ANY WARRANTY; without even the implied warranty of 
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License 
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// InvoiceEventSubscriber is an autogenerated mock type for the InvoiceEventSubscriber type
type InvoiceEventSubscriber struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *InvoiceEventSubscriber) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Subscribe provides a mock function with given fields: ctx
func (_m *InvoiceEventSubscriber) Subscribe(ctx context.Context) chan error {
	ret := _m.Called(ctx)

	var r0 chan error
	if rf, ok := ret.Get(0).(func(context.Context) chan error); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan error)
		}
	}

	return r0
}

type NewInvoiceEventSubscriberT interface {
	mock.TestingT
	Cleanup(func())
}

// NewInvoiceEventSubscriber creates a new instance of InvoiceEventSubscriber. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewInvoiceEventSubscriber(t NewInvoiceEventSubscriberT) *InvoiceEventSubscriber {
	mock := &InvoiceEventSubscriber{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
