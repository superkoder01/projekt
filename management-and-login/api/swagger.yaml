swagger: '2.0'
info:
  description: >-
    C4E
  version: 1.0.0
  title: C4E management-and-login RESTful API
schemes: [ http ]
host: localhost:8181
basePath: /api
tags:
  - name: Authenticate
  - name: Register
  - name: Activate
  - name: Customer Account
  - name: Customer User
  - name: Password
  - name: Provider
  - name: User
  - name: Worker
  - name: Worker User
consumes: [ application/json ]
produces: [ application/json ]
securityDefinitions:
  JWT:
    type: apiKey
    in: header
    name: Authorization
security:
  - JWT: []
paths:
  # AUTHENTICATE
  /authenticate:
    post:
      tags: [ Authenticate ]
      operationId: Authenticate
      parameters:
        - in: body
          name: user
          required: true
          schema:
            $ref: '#/definitions/AuthDto'
      responses:
        200:
          description: Authenticated
          schema:
            $ref: '#/definitions/SignedTokenDto'
  # PROVIDER
  /providers:
    post:
      tags: [ Provider ]
      operationId: CreateProvider
      parameters:
        - in: body
          name: provider
          required: true
          schema:
            $ref: '#/definitions/ProviderDto'
      responses:
        201:
          description: Provider Created
          schema:
            $ref: '#/definitions/ProviderDto'
        401:
          description: Unauthorized
    get:
      tags: [ Provider ]
      operationId: ListProviders
      responses:
        200:
          description: 'Providers list'
          schema:
            type: array
            items:
              $ref: '#/definitions/ProviderDto'
        401:
          description: Unauthorized
  /providers/{providerId}:
    get:
      tags: [ Provider ]
      operationId: GetProviderByID
      parameters:
        - name: providerId
          in: path
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: Provider
          schema:
            $ref: '#/definitions/ProviderDto'
        401:
          description: Unauthorized
    put:
      tags: [ Provider ]
      operationId: UpdateProviderByID
      parameters:
        - name: providerId
          in: path
          required: true
          type: integer
          format: int64
        - in: body
          name: provider
          required: true
          schema:
            $ref: '#/definitions/ProviderDto'
      responses:
        200:
          description: Provider Updated
          schema:
            $ref: '#/definitions/ProviderDto'
        401:
          description: Unauthorized
    delete:
      tags: [ Provider ]
      operationId: DeleteProviderByID
      parameters:
        - name: providerId
          in: path
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: Provider Deleted
        401:
          description: Unauthorized
  # CUSTOMER ACCOUNTS
  /providers/{providerId}/customerAccounts:
    post:
      tags: [ Customer Account ]
      operationId: CreateCustomerAccount
      parameters:
        - name: providerId
          in: path
          required: true
          type: integer
          format: int64
        - in: body
          name: customerAccount
          required: true
          schema:
            $ref: '#/definitions/CustomerAccountDto'
      responses:
        201:
          description: Customer Account Created
          schema:
            $ref: '#/definitions/CustomerAccountDto'
        401:
          description: Unauthorized
    get:
      tags: [ Customer Account ]
      operationId: ListCustomerAccounts
      parameters:
        - name: providerId
          in: path
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: Customer Accounts list
          schema:
            type: array
            items:
              $ref: '#/definitions/CustomerAccountDto'
        401:
          description: Unauthorized
  /providers/{providerId}/customerAccounts/{customerAccountId}:
    get:
      tags: [ Customer Account ]
      operationId: GetCustomerAccountByID
      parameters:
        - name: providerId
          in: path
          required: true
          type: integer
          format: int64
        - name: customerAccountId
          in: path
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: Customer Account
          schema:
            $ref: '#/definitions/CustomerAccountDto'
        401:
          description: Unauthorized
    put:
      tags: [ Customer Account ]
      operationId: UpdateCustomerAccountByID
      parameters:
        - name: providerId
          in: path
          required: true
          type: integer
          format: int64
        - name: customerAccountId
          in: path
          required: true
          type: integer
          format: int64
        - in: body
          name: customerAccount
          required: true
          schema:
            $ref: '#/definitions/CustomerAccountDto'
      responses:
        200:
          description: Customer Account updated
          schema:
            $ref: '#/definitions/CustomerAccountDto'
        401:
          description: Unauthorized
    delete:
      tags: [ Customer Account ]
      operationId: DeleteCustomerAccountByID
      parameters:
        - name: providerId
          in: path
          required: true
          type: integer
          format: int64
        - name: customerAccountId
          in: path
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: Customer Account deleted
        401:
          description: Unauthorized
  #  USERS
  /providers/{providerId}/users:
    post:
      tags: [ User ]
      operationId: CreateUser
      parameters:
        - name: providerId
          in: path
          required: true
          type: integer
          format: int64
        - in: body
          name: user
          required: true
          schema:
            $ref: '#/definitions/UserDto'
      responses:
        201:
          description: User Created
          schema:
            $ref: '#/definitions/UserDto'
        401:
          description: Unauthorized
    get:
      tags: [ User ]
      operationId: ListUsers
      parameters:
        - name: providerId
          in: path
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: 'Users list'
          schema:
            type: array
            items:
              $ref: '#/definitions/UserDto'
        401:
          description: Unauthorized
  /providers/{providerId}/users/{userId}:
    get:
      tags: [ User ]
      operationId: GetUserById
      parameters:
        - name: providerId
          in: path
          required: true
          type: integer
          format: int64
        - name: userId
          in: path
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: User
          schema:
            $ref: '#/definitions/UserDto'
        401:
          description: Unauthorized
    put:
      tags: [ User ]
      operationId: UpdateUserById
      parameters:
        - name: providerId
          in: path
          required: true
          type: integer
          format: int64
        - name: userId
          in: path
          required: true
          type: integer
          format: int64
        - in: body
          name: user
          required: true
          schema:
            $ref: '#/definitions/UserDto'
      responses:
        200:
          description: User
          schema:
            $ref: '#/definitions/UserDto'
        401:
          description: Unauthorized
    delete:
      tags: [ User ]
      operationId: DeleteUserById
      parameters:
        - name: providerId
          in: path
          required: true
          type: integer
          format: int64
        - name: userId
          in: path
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: User Deleted
        401:
          description: Unauthorized
  /providers/{providerId}/users/{userId}/password:
    put:
      tags: [ User ]
      operationId: ChangeUserPassword
      parameters:
        - name: providerId
          in: path
          required: true
          type: integer
          format: int64
        - name: userId
          in: path
          required: true
          type: integer
          format: int64
        - in: body
          name: userChangePassword
          required: true
          schema:
            $ref: '#/definitions/UserChangePasswordDto'
      responses:
        200:
          description: Password changed
        401:
          description: Unauthorized
  /providers/{providerId}/users/customerAccountInfo:
    get:
      tags: [ User ]
      operationId: GetUserCustomerAccountInfo
      parameters:
        - name: providerId
          in: path
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: Customer Account
          schema:
            $ref: '#/definitions/CustomerAccountDto'
        401:
          description: Unauthorized
  /providers/{providerId}/users/superAdmins:
    get:
      tags: [ User ]
      operationId: ListSuperAdmins
      parameters:
        - name: providerId
          in: path
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: 'Super Admin list'
          schema:
            type: array
            items:
              $ref: '#/definitions/UserDto'
        401:
          description: Unauthorized
  /providers/{providerId}/users/administrators:
    get:
      tags: [ User ]
      operationId: ListAdministrators
      parameters:
        - name: providerId
          in: path
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: 'Admin list'
          schema:
            type: array
            items:
              $ref: '#/definitions/UserDto'
        401:
          description: Unauthorized
  #  WORKERS
  /providers/{providerId}/workers:
    post:
      tags: [ Worker ]
      operationId: CreateWorker
      parameters:
        - name: providerId
          in: path
          required: true
          type: integer
          format: int64
        - in: body
          name: worker
          required: true
          schema:
            $ref: '#/definitions/WorkerDto'
      responses:
        201:
          description: Worker Created
          schema:
            $ref: '#/definitions/WorkerDto'
        401:
          description: Unauthorized
    get:
      tags: [ Worker ]
      operationId: ListWorkers
      parameters:
        - name: providerId
          in: path
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: 'Workers list'
          schema:
            type: array
            items:
              $ref: '#/definitions/WorkerDto'
        401:
          description: Unauthorized
  /providers/{providerId}/workers/{workerId}:
    get:
      tags: [ Worker ]
      operationId: GetWorkerById
      parameters:
        - name: providerId
          in: path
          required: true
          type: integer
          format: int64
        - name: workerId
          in: path
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: Worker
          schema:
            $ref: '#/definitions/WorkerDto'
        401:
          description: Unauthorized
    put:
      tags: [ Worker ]
      operationId: UpdateWorkerById
      parameters:
        - name: providerId
          in: path
          required: true
          type: integer
          format: int64
        - name: workerId
          in: path
          required: true
          type: integer
          format: int64
        - in: body
          name: worker
          required: true
          schema:
            $ref: '#/definitions/WorkerDto'
      responses:
        200:
          description: Worker
          schema:
            $ref: '#/definitions/WorkerDto'
        401:
          description: Unauthorized
    delete:
      tags: [ Worker ]
      operationId: DeleteWorkerById
      parameters:
        - name: providerId
          in: path
          required: true
          type: integer
          format: int64
        - name: workerId
          in: path
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: Worker Deleted
        401:
          description: Unauthorized
  # CUSTOMER USERS
  /providers/{providerId}/customerUsers:
    post:
      tags: [ Customer User ]
      operationId: CreateCustomerUser
      parameters:
        - name: providerId
          in: path
          required: true
          type: integer
          format: int64
        - in: body
          name: customerUser
          required: true
          schema:
            $ref: '#/definitions/CustomerUserDto'
      responses:
        201:
          description: Worker and User Created
          schema:
            $ref: '#/definitions/CustomerUserDto'
        401:
          description: Unauthorized
  #  WORKER USERS
  /providers/{providerId}/workerUsers:
    post:
      tags: [ Worker User ]
      operationId: CreateWorkerUser
      parameters:
        - name: providerId
          in: path
          required: true
          type: integer
          format: int64
        - in: body
          name: workerUser
          required: true
          schema:
            $ref: '#/definitions/WorkerUserDto'
      responses:
        201:
          description: Worker and User Created
          schema:
            $ref: '#/definitions/WorkerUserDto'
        401:
          description: Unauthorized
  # REGISTER USER
  /register/{activationCode}:
    get:
      tags: [ Register ]
      operationId: RegisterUser
      parameters:
        - in: path
          name: activationCode
          required: true
          type: string
      responses:
        200:
          description: User Registered
          schema:
            $ref: '#/definitions/UserDto'
        404:
          description: User Not Found
  # ACTIVATE USER
  /activate/{activationCode}:
    put:
      tags: [ Activate ]
      operationId: ActivateUser
      parameters:
        - in: path
          name: activationCode
          required: true
          type: string
        - in: body
          name: activate
          required: true
          schema:
            $ref: '#/definitions/UserActivateDto'
      responses:
        200:
          description: User Activated
        404:
          description: User Not Found
  # USER PASSWORD RESET
  /users/password:
    put:
      tags: [ Password ]
      operationId: ResetPassword
      parameters:
        - in: body
          name: login
          required: true
          schema:
            $ref: '#/definitions/EmailDto'
      responses:
        200:
          description: Password reset
# DEFINITIONS
definitions:
  AuthDto:
    type: object
    required:
      - login
      - password
    properties:
      login:
        type: string
        example: ovoo
      password:
        type: string
        example: ovoo
  SignedTokenDto:
    type: object
    required:
      - id
      - accessToken
    properties:
      id:
        type: string
        example: aisj8qj8as8ha8h17237gda6sg
      accessToken:
        type: string
        example: X&YS&D.(SDASH&*SH&SAD!.SDJA*SDSA&XHAS^!#GFPHAF
  ProviderDto:
    type: object
    required:
      - name
      - nip
    properties:
      id:
        type: integer
        format: int64
        readOnly: true
      name:
        type: string
        example: Ovoo
      email:
        type: string
        example: ovoo@email.com
      status:
        type: boolean
      nip:
        type: string
        example: 123456789
      regon:
        type: string
        example: 123456789
      krs:
        type: string
        example: 123456789
      phoneNumber:
        type: string
        example: 123456789
      street:
        type: string
        example: Kalwaryjska
      buildingNumber:
        type: string
        example: 33
      apartmentNumber:
        type: string
        example: 21
      postalCode:
        type: string
        example: 30-519
      province:
        type: string
        example: Malopolskie
      city:
        type: string
        example: Krakow
      country:
        type: string
        example: Poland
      licenseID:
        type: string
        example: 123456789
      licenseExpirationDate:
        type: string
        example: 2022-04-06T00:00:00.00Z
      licenseArea:
        type: string
        example: Krakow
  CustomerAccountDto:
    type: object
    required:
      - providerId
      - customerTypeName
    properties:
      id:
        type: integer
        format: int64
        readOnly: true
      providerId:
        type: integer
        format: int64
      customerTypeName:
        type: string
        example: CONSUMER
      firstName:
        type: string
        example: Adam
      lastName:
        type: string
        example: Adam
      status:
        type: boolean
      nip:
        type: string
        example: 6762457439
      pesel:
        type: string
        example: 90070602141
      regon:
        type: string
        example: 122623815
      email:
        type: string
        example: ovoo@ovoo.pl
      phone:
        type: string
        example: "600700800"
      street:
        type: string
        example: Kalwaryjska
      buildingNumber:
        type: string
        example: "33"
      apartmentNumber:
        type: string
        example: "21"
      postalCode:
        type: string
        example: "31-519"
      province:
        type: string
        example: Malopolskie
      city:
        type: string
        example: Krakow
      country:
        type: string
        example: Poland
  CustomerUserDto:
    type: object
    required:
      - customerTypeName
      - email
      - providerId
      - login
      - password
    properties:
      customerAccountId:
        type: integer
        format: int64
        readOnly: true
      customerTypeName:
        type: string
        example: CONSUMER
      userId:
        type: integer
        format: int64
        readOnly: true
      providerId:
        type: integer
        format: int64
      login:
        type: string
        example: user101
      password:
        type: string
        example: pass101!
      active:
        type: boolean
      mustChangePassword:
        type: boolean
      firstName:
        type: string
        example: Jan
      lastName:
        type: string
        example: Kowalski
      email:
        type: string
        example: jan.kowalski@email.com
      phone:
        type: string
        example: "600800900"
      street:
        type: string
        example: Kalwaryjska
      buildingNumber:
        type: string
        example: "33"
      apartmentNumber:
        type: string
        example: "21"
      postalCode:
        type: string
        example: "31-519"
      province:
        type: string
        example: Malopolskie
      city:
        type: string
        example: Krakow
      country:
        type: string
        example: Poland
      nip:
        type: string
        example: "1234567890"
      regon:
        type: string
        example: "1234567890"
      pesel:
        type: string
        example: "80070602141"
      bankAccNumber:
        type: string
        example: "0000 1111 2222 3333 4444 5555 66"
  UserDto:
    type: object
    required:
      - login
      - password
      - providerId
    properties:
      id:
        type: integer
        format: int64
        readOnly: true
      login:
        type: string
        example: user101
      password:
        type: string
        example: pass101!
      providerId:
        type: integer
        format: int64
      customerAccountId:
        type: integer
        format: int64
      workerId:
        type: integer
        format: int64
      roleId:
        type: integer
        format: int64
      active:
        type: boolean
      mustChangePassword:
        type: boolean
  WorkerDto:
    type: object
    required:
      - email
      - blockchainAccAddress
      - providerId
    properties:
      id:
        type: integer
        format: int64
        readOnly: true
      firstName:
        type: string
        example: Jan
      lastName:
        type: string
        example: Kowalski
      email:
        type: string
        example: jan.kowalski@email.com
      phone:
        type: string
        example: "600800900"
      workStartDate:
        type: string
        example: "2022-03-21T00:00:00.00Z"
      workEndDate:
        type: string
        example: "2023-03-21T00:00:00.00Z"
      blockchainAccAddress:
        type: string
        example: jan.kowalski@email.com
      providerId:
        type: integer
        format: int64
      street:
        type: string
        example: Kalwaryjska
      buildingNumber:
        type: string
        example: "33"
      apartmentNumber:
        type: string
        example: "21"
      postalCode:
        type: string
        example: "31-519"
      province:
        type: string
        example: Malopolskie
      city:
        type: string
        example: Krakow
      country:
        type: string
        example: Poland
      supervisor:
        type: integer
        format: int64
  WorkerUserDto:
    type: object
    required:
      - email
      - blockchainAccAddress
      - providerId
      - login
      - password
    properties:
      workerId:
        type: integer
        format: int64
        readOnly: true
      userId:
        type: integer
        format: int64
        readOnly: true
      providerId:
        type: integer
        format: int64
      login:
        type: string
        example: user101
      password:
        type: string
        example: pass101!
      roleId:
        type: integer
        format: int64
      active:
        type: boolean
      mustChangePassword:
        type: boolean
      firstName:
        type: string
        example: Jan
      lastName:
        type: string
        example: Kowalski
      email:
        type: string
        example: jan.kowalski@email.com
      phone:
        type: string
        example: "600800900"
      workStartDate:
        type: string
        example: "2022-03-21T00:00:00.00Z"
      workEndDate:
        type: string
        example: "2023-03-21T00:00:00.00Z"
      blockchainAccAddress:
        type: string
        example: jan.kowalski@email.com
      street:
        type: string
        example: Kalwaryjska
      buildingNumber:
        type: string
        example: "33"
      apartmentNumber:
        type: string
        example: "21"
      postalCode:
        type: string
        example: "31-519"
      province:
        type: string
        example: Malopolskie
      city:
        type: string
        example: Krakow
      country:
        type: string
        example: Poland
  UserChangePasswordDto:
    type: object
    required:
      - oldPassword
      - newPassword
      - newPasswordRetype
    properties:
      oldPassword:
        type: string
        example: pass123!
      newPassword:
        type: string
        example: pass1234!
      newPasswordRetype:
        type: string
        example: pass1234!
  UserActivateDto:
    type: object
    required:
      - newPassword
      - newPasswordRetype
    properties:
      newPassword:
        type: string
        example: pass1234!
      newPasswordRetype:
        type: string
        example: pass1234!
  EmailDto:
    type: object
    required:
      - email
    properties:
      email:
        type: string
        example: jan.kowalski@email.com