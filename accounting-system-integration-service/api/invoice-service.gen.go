// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version (devel) DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const SELECT_BY_ISSUE_DATE = "issueDate"

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /summary-invoices/)
	GetSummaryInvoicesByDateRange(ctx echo.Context, params GetSummaryInvoicesByDateRangeParams) error

	// (GET /summary-invoices/{invoiceNumber}/)
	GetSummaryInvoiceByInvoiceNumber(ctx echo.Context, invoiceNumber string) error

	// (GET /customers/{customerId}/summary-invoices/)
	GetCustomerSummaryInvoicesByDateRange(ctx echo.Context, customerId string, params GetSummaryInvoicesByDateRangeParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetSummaryInvoicesByDateRange converts echo context to params.
func (w *ServerInterfaceWrapper) GetSummaryInvoicesByDateRange(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSummaryInvoicesByDateRangeParams
	// ------------- Required query parameter "selectBy" -------------

	err = runtime.BindQueryParameter("form", true, true, "selectBy", ctx.QueryParams(), &params.SelectBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter selectBy: %s", err))
	}
	if (params.SelectBy != SELECT_BY_ISSUE_DATE) {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unsupported value of the parameter selectBy: %s", err))
	}

	// ------------- Required query parameter "startAt" -------------

	err = runtime.BindQueryParameter("form", true, true, "startAt", ctx.QueryParams(), &params.StartAt)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter startAt: %s", err))
	}

	// ------------- Optional query parameter "endAt" -------------

	err = runtime.BindQueryParameter("form", true, false, "endAt", ctx.QueryParams(), &params.EndAt)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter endAt: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSummaryInvoicesByDateRange(ctx, params)
	return err
}

// GetSummaryInvoiceByInvoiceNumber converts echo context to params.
func (w *ServerInterfaceWrapper) GetSummaryInvoiceByInvoiceNumber(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "invoiceNumber" -------------
	var invoiceNumber string

	err = runtime.BindStyledParameterWithLocation("simple", false, "invoiceNumber", runtime.ParamLocationPath, ctx.Param("invoiceNumber"), &invoiceNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter invoiceNumber: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSummaryInvoiceByInvoiceNumber(ctx, invoiceNumber)
	return err
}

// GetCustomerSummaryInvoicesByDateRange converts echo context to params.
func (w *ServerInterfaceWrapper) GetCustomerSummaryInvoicesByDateRange(ctx echo.Context) error {
	var err error

	// ------------- Path parameter "customerId" -------------
	var customerId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "customerId", runtime.ParamLocationPath, ctx.Param("customerId"), &customerId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter customerId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSummaryInvoicesByDateRangeParams
	// ------------- Required query parameter "selectBy" -------------

	err = runtime.BindQueryParameter("form", true, true, "selectBy", ctx.QueryParams(), &params.SelectBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter selectBy: %s", err))
	}
	if (params.SelectBy != SELECT_BY_ISSUE_DATE) {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Unsupported value of the parameter selectBy: %s", err))
	}

	// ------------- Required query parameter "startAt" -------------

	err = runtime.BindQueryParameter("form", true, true, "startAt", ctx.QueryParams(), &params.StartAt)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter startAt: %s", err))
	}

	// ------------- Optional query parameter "endAt" -------------

	err = runtime.BindQueryParameter("form", true, false, "endAt", ctx.QueryParams(), &params.EndAt)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter endAt: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCustomerSummaryInvoicesByDateRange(ctx, customerId, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/summary-invoices", wrapper.GetSummaryInvoicesByDateRange)
	router.GET(baseURL+"/summary-invoices/:invoiceNumber/", wrapper.GetSummaryInvoiceByInvoiceNumber)
	router.GET(baseURL+"/customers/:customerId/summary-invoices", wrapper.GetCustomerSummaryInvoicesByDateRange)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RWTW/bOBD9KwR3j0rsfuzFp02QYJFLUcRFL0WwoMWRzJYiGc7QiGv4vxekJNv6imMU",
	"PVnmDIdvZt48csdzWzlrwBDyxY5jvoZKpM97762PH85bB54UpOXcSoi/EjD3ypGyhi9qZ5ZsGS+srwTx",
	"BVeGPrznGaetg/ovlOD5PuMVIIpyMlBrPmxF8sqUfL/PuIfnoDxIvvjGmwNb96d9xpeg9TJUlfDbB4Jq",
	"OoFe5IyX3iJ+FTok8yEJacNKn0AxoVrVSRhRjUcyQJfEIfFyiftG0KOgt3n36pUQZ23Z2kAngE/AdAry",
	"dIhsV98hp4ijrbLZWJXDsNBrEBJGGWQIDA0N9Qm7kZ4PznbeblQTvUugz60lG/ZlAx6TV3/T19rAbMFo",
	"DUzaPFRgiKUI50jYRj1BlR2SHCucE1tthRypTECyFfg7IKE0Tjs8yFHeSYVOi+2nKV4WyiNNWrV4xWiU",
	"G133UNYFPTOoR+BjFVE1hybzXimtlSnvjbxrmD8A0rgsSXiadDpTvwbGp3p4Rj0QA0yGd2IbaXP3iguC",
	"38RMJ+0kKOD5gnahdjIbqUXWr+BpJl1QgywOmMYah0e1HXatBANe6P+VqXWqGT1FUCX73x4KvuB/zY53",
	"0Ky5gGZ9GT+KgPBebMdVgSwJPYLjYmH/g/rdV+TLlXecCe3snPVvZPkoQyM70iwUtlVrkSe1hkoozRdc",
	"hx8Cf17LIH8qgz/Uv3Zj7bXTSYI6uvplrZApTKL6eL/8wm4+PzB0kKtC5YkQrLA+mbu3CVvWlIxlUaQj",
	"uMaB9TxiSH4i7Xx+Pb9+F6FYB0Y4xRf8Q1qKGdM6MWKGdbCrpng4q/ma0ozUSdiiSvD/gLrQ8HYb5+JR",
	"mLKeFi8qIPDIF992g/yBSUHAVgJBskKBlixewmwFypQsxFWBTLBCaUpdUXHfcwC/5e0LI04Z5HQbV46d",
	"JB8gax5so3oxBgajJCRIU0dFhxv6/ZPAyNfOASPTKdNRnyIEdNZgPcXv5/Pe60E4pxsazb5jLS7HeG+T",
	"me4bZqgyA0ovQ54DYhE0OxAlYx4oeBMbmVsdm9W8JhqesZZn8YR/LkzkNfz1I30E5oMh8EZo1npEfSnx",
	"RDDi3L9cxadgCeYqdhuQrlZWbq+aHsXvtHM4LrvO/bO/YHxu24/D1XV2goJRzwHaGjLTbky8ijN9pFX/",
	"Wnw7iX+Xbpew7HJW9Xh0UM1GS0H2q7PP+Mf5x+FLt1VPY4kVNhhZi3YhgqY/z8pg4MVBTiAZTPMybYxv",
	"kpYSwcdrZyacmm3ezXjsVbOpn95NKiMje6hHLQN9gvD90/5XAAAA//9benhr/A4AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
